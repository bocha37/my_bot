from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter
from config import ADMIN_ID

router = Router()

class QuestionState(StatesGroup):
    waiting_for_question = State()

# --- –†–∞—Å—á—ë—Ç –ë–ñ–£ ---
@router.message(F.text == "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ë–ñ–£")
async def calc_bzu(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (–∫–≥):")
    await state.set_state("waiting_weight")

@router.message(StateFilter("waiting_weight"))
async def get_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        await state.update_data(weight=weight)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç (—Å–º):")
        await state.set_state("waiting_height")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(StateFilter("waiting_height"))
async def get_height(message: Message, state: FSMContext):
    try:
        height = float(message.text)
        await state.update_data(height=height)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state("waiting_age")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(StateFilter("waiting_age"))
async def get_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:\n1 - –º—É–∂—Å–∫–æ–π\n2 - –∂–µ–Ω—Å–∫–∏–π")
        await state.set_state("waiting_gender")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(StateFilter("waiting_gender"))
async def get_gender(message: Message, state: FSMContext):
    gender = message.text.strip()
    if gender not in ["1", "2"]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        return

    await state.update_data(gender=gender)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
        "1 ‚Äì –°–∏–¥—è—á–∏–π (–º–∏–Ω–∏–º—É–º –¥–≤–∏–∂–µ–Ω–∏—è)\n"
        "2 ‚Äì –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "3 ‚Äì –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "4 ‚Äì –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "5 ‚Äì –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    )
    await state.set_state("waiting_activity")

@router.message(StateFilter("waiting_activity"))
async def get_activity(message: Message, state: FSMContext):
    activity = message.text.strip()
    if activity not in ["1", "2", "3", "4", "5"]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    activity_map = {
        "1": 1.2,
        "2": 1.375,
        "3": 1.55,
        "4": 1.725,
        "5": 1.9
    }

    await state.update_data(activity=activity_map[activity])
    data = await state.get_data()
    weight = data["weight"]
    height = data["height"]
    age = data["age"]
    gender = data["gender"]

    # –§–æ—Ä–º—É–ª–∞ Mifflin-St Jeor
    if gender == "1":
        bmr = (10 * weight) + (6.25 * height) - (5 * age) + 5
    else:
        bmr = (10 * weight) + (6.25 * height) - (5 * age) - 161

    tdee = round(bmr * data["activity"])
    await state.update_data(tdee=tdee)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:", reply_markup=get_goal_keyboard(tdee))
    await state.clear()

def get_goal_keyboard(tdee: float):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data=f"goal_lose_{tdee}_{tdee*0.8}")],
        [InlineKeyboardButton(text="üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data=f"goal_gain_{tdee}_{tdee*1.2}")],
        [InlineKeyboardButton(text="‚öñÔ∏è –£–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", callback_data=f"goal_maintain_{tdee}_{tdee}")]
    ])

@router.callback_query(lambda c: c.data.startswith("goal_"))
async def process_goal(callback: CallbackQuery):
    parts = callback.data.split("_")
    if len(parts) < 4:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏.")
        return

    try:
        goal_type = parts[1]  # 'lose', 'gain' –∏–ª–∏ 'maintain'
        tdee = float(parts[2])  # –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π
        calories = float(parts[3])  # —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await callback.bot.get_chat_member(callback.from_user.id, callback.from_user.id)
        weight = user_data.user.weight or 70  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º 70 –∫–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    except (ValueError, IndexError):
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ë–ñ–£.")
        return

    proteins = round(weight * 2)
    fats = round(weight * 0.8)
    carbs = round((calories - proteins * 4 - fats * 9) / 4)

    if carbs < 0:
        carbs = 0

    if goal_type == "lose":
        answer = (
            f"üéØ –¶–µ–ª—å: –ü–æ—Ö—É–¥–µ–Ω–∏–µ\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {round(calories)} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            f"–ë–µ–ª–∫–∏: {proteins} –≥\n"
            f"–ñ–∏—Ä—ã: {fats} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–∏—Ç–∞–Ω–∏–µ:\n"
            f"- –ú–Ω–æ–≥–æ –æ–≤–æ—â–µ–π –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∏\n"
            f"- –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤ (–∫—É—Ä–∏—Ü–∞, —è–π—Ü–∞, —Ä—ã–±–∞)\n"
            f"- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –∏ –ø—Ä–æ—Å—Ç—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤\n\n"
            f"–î–æ–±–∞–≤–∫–∏ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è:\n"
            f"- L-–∫–∞—Ä–Ω–∏—Ç–∏–Ω ‚Äì –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∂–∏—Ä –≤ —ç–Ω–µ—Ä–≥–∏—é\n"
            f"- CLA ‚Äì —Å–Ω–∏–∂–∞–µ—Ç –∂–∏—Ä–æ–≤—ã–µ –æ—Ç–ª–æ–∂–µ–Ω–∏—è\n"
            f"- –ó–µ–ª—ë–Ω—ã–π —á–∞–π —ç–∫—Å—Ç—Ä–∞–∫—Ç ‚Äì –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç + –º–µ—Ç–∞–±–æ–ª–∏–∑–º\n"
            f"- –•—Ä–æ–º ‚Äì —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞\n"
            f"- –ì–∞—Ä—Ü–∏–Ω–∏—è –∫–∞–º–±–æ–¥–∂–∏–π—Å–∫–∞—è ‚Äì –ø–æ–¥–∞–≤–ª—è–µ—Ç –∞–ø–ø–µ—Ç–∏—Ç\n"
            f"- –ö–æ—Ñ–µ–∏–Ω ‚Äì —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä, —É—Å–∫–æ—Ä—è–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º\n"
            f"- –ê–ª—å—Ñ–∞-–ª–∏–ø–æ–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞ ‚Äì —É–ª—É—á—à–∞–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –∏–Ω—Å—É–ª–∏–Ω—É"
        )
    elif goal_type == "gain":
        answer = (
            f"üéØ –¶–µ–ª—å: –ù–∞–±–æ—Ä –º–∞—Å—Å—ã\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {round(calories)} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            f"–ë–µ–ª–∫–∏: {proteins} –≥\n"
            f"–ñ–∏—Ä—ã: {fats} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–∏—Ç–∞–Ω–∏–µ:\n"
            f"- –ú–Ω–æ–≥–æ —Å–ª–æ–∂–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤ (–≥—Ä–µ—á–∫–∞, —Ä–∏—Å, –æ–≤—Å—è–Ω–∫–∞)\n"
            f"- –ë–µ–ª–∫–∏ (—è–π—Ü–∞, –º—è—Å–æ, –ø—Ä–æ—Ç–µ–∏–Ω)\n"
            f"- –ü–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã (–∞–≤–æ–∫–∞–¥–æ, –æ—Ä–µ—Ö–∏, —Ä—ã–±–∏–π –∂–∏—Ä)\n\n"
            f"–î–æ–±–∞–≤–∫–∏ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã:\n"
            f"- –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å ‚Äì –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞\n"
            f"- –ö—Ä–µ–∞—Ç–∏–Ω –º–æ–Ω–æ–≥–∏–¥—Ä–∞—Ç ‚Äì –ø–æ–≤—ã—à–∞–µ—Ç —Å–∏–ª–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
            f"- BCAA ‚Äì –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–±–æ–ª–∏–∑–º–∞ –º—ã—à—Ü\n"
            f"- –ì–µ–π–Ω–µ—Ä ‚Äì –µ—Å–ª–∏ —Å–ª–æ–∂–Ω–æ –µ—Å—Ç—å –º–Ω–æ–≥–æ –µ–¥—ã\n"
            f"- HMB ‚Äì —Å–Ω–∏–∂–∞–µ—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –º—ã—à–µ—á–Ω–æ–π —Ç–∫–∞–Ω–∏\n"
            f"- Beta-Alanine ‚Äì –ø–æ–≤—ã—à–∞–µ—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å\n"
            f"- L-–≥–ª—é—Ç–∞–º–∏–Ω ‚Äì —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é"
        )
    elif goal_type == "maintain":
        answer = (
            f"‚öñÔ∏è –¶–µ–ª—å: –£–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {round(calories)} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            f"–ë–µ–ª–∫–∏: {proteins} –≥\n"
            f"–ñ–∏—Ä—ã: {fats} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–∏—Ç–∞–Ω–∏–µ:\n"
            f"- –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n"
            f"- –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
            f"- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏\n\n"
            f"–î–æ–±–∞–≤–∫–∏ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞:\n"
            f"- –ú—É–ª—å—Ç–∏–≤–∏—Ç–∞–º–∏–Ω—ã ‚Äì –ø–æ–∫—Ä—ã–≤–∞—é—Ç –¥–µ—Ñ–∏—Ü–∏—Ç –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤\n"
            f"- –û–º–µ–≥–∞-3 ‚Äì –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Ä–¥—Ü–∞ –∏ –º–æ–∑–≥–∞\n"
            f"- –ê–¥–∞–ø—Ç–æ–≥–µ–Ω—ã ‚Äì —Å–Ω–∏–∂–∞—é—Ç —Å—Ç—Ä–µ—Å—Å\n"
            f"- –ü—Ä–æ–±–∏–æ—Ç–∏–∫–∏ ‚Äì –∑–¥–æ—Ä–æ–≤—å–µ –ñ–ö–¢\n"
            f"- –í–∏—Ç–∞–º–∏–Ω D ‚Äì –æ—Å–æ–±–µ–Ω–Ω–æ –∑–∏–º–æ–π\n"
            f"- –ú–∞–≥–Ω–∏–π ‚Äì —É–ª—É—á—à–∞–µ—Ç —Å–æ–Ω –∏ —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å\n"
            f"- –ö–æ–ª–ª–∞–≥–µ–Ω ‚Äì –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –∫–æ–∂–∏, –≤–æ–ª–æ—Å, —Å—É—Å—Ç–∞–≤–æ–≤"
        )
    else:
        answer = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å."

    await callback.message.edit_text(answer)

# --- –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---
@router.message(F.text == "üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
async def workouts(message: Message):
    answer = (
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
        "üî• –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è:\n"
        "- –ö–∞—Ä–¥–∏–æ (–±–µ–≥, –ø—Ä—ã–∂–∫–∏, –≤–µ–ª–æ—Å–∏–ø–µ–¥) ‚Äì 3‚Äì4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 30 –º–∏–Ω\n"
        "- HIIT ‚Äì 2‚Äì3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (20 –º–∏–Ω)\n"
        "- –°–∏–ª–æ–≤—ã–µ ‚Äì 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, –æ—Ç–∂–∏–º–∞–Ω–∏—è, —Ç—è–≥–∞)\n\n"
        "üìà –î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã:\n"
        "- –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–ø–ª–∏—Ç: –≥—Ä—É–¥—å+—Ç—Ä–∏—Ü–µ–ø—Å, –Ω–æ–≥–∏, —Å–ø–∏–Ω–∞+–±–∏—Ü–µ–ø—Å\n"
        "- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –∂–∏–º —à—Ç–∞–Ω–≥–∏ –ª—ë–∂–∞, —Å—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞, –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è\n"
        "- –û—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏: 60‚Äì90 —Å–µ–∫—É–Ω–¥\n"
        "- 3‚Äì4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é"
    )
    await message.answer(answer)

# --- –ü–∏—Ç–∞–Ω–∏–µ ---
@router.message(F.text == "ü•ó –ü–∏—Ç–∞–Ω–∏–µ")
async def nutrition(message: Message):
    answer = (
        "–ü–∏—Ç–∞–Ω–∏–µ:\n\n"
        "üî• –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è:\n"
        "- –ó–∞–≤—Ç—Ä–∞–∫: –≥—Ä–µ—á–∫–∞ + —è–π—Ü–∞ + –æ–≤–æ—â–∏\n"
        "- –û–±–µ–¥: –∫—É—Ä–∏—Ü–∞ + –±—Ä–æ–∫–∫–æ–ª–∏ + –∫–∏–Ω–æ–∞\n"
        "- –ü–µ—Ä–µ–∫—É—Å: –π–æ–≥—É—Ä—Ç + –æ—Ä–µ—Ö–∏\n"
        "- –£–∂–∏–Ω: —Ä—ã–±–∞ + –∑–µ–ª–µ–Ω—å + –∞–≤–æ–∫–∞–¥–æ\n\n"
        "üìà –î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã:\n"
        "- –ó–∞–≤—Ç—Ä–∞–∫: –æ–≤—Å—è–Ω–∫–∞ + –±–∞–Ω–∞–Ω + –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–µ –º–∞—Å–ª–æ\n"
        "- –û–±–µ–¥: –º–∞–∫–∞—Ä–æ–Ω—ã + –º—è—Å–æ + –æ–≤–æ—â–∏\n"
        "- –ü–µ—Ä–µ–∫—É—Å: –ø—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å + —Ñ—Ä—É–∫—Ç—ã\n"
        "- –£–∂–∏–Ω: —Ä–∏—Å + –∫—É—Ä–∏—Ü–∞ + –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ"
    )
    await message.answer(answer)

# --- –ó–¥–æ—Ä–æ–≤—å–µ ---
@router.message(F.text == "ü©∫ –ó–¥–æ—Ä–æ–≤—å–µ")
async def health_tips(message: Message):
    answer = (
        "–ó–¥–æ—Ä–æ–≤—å–µ:\n"
        "- –°–ø–∏ –Ω–µ –º–µ–Ω–µ–µ 7 —á–∞—Å–æ–≤\n"
        "- –ü–µ–π 2‚Äì3 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å\n"
        "- –ò–∑–±–µ–≥–∞–π —Å—Ç—Ä–µ—Å—Å–∞, –¥–µ–ª–∞–π –ø–∞—É–∑—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º\n"
        "- –î–µ–ª–∞–π –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ\n"
        "- –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫—Ä–æ–≤–∏ –∏ –¥–∞–≤–ª–µ–Ω–∏–µ"
    )
    await message.answer(answer)

# --- –õ–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ---
@router.message(F.text == "‚úâÔ∏è –õ–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
async def ask_personal_question(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(QuestionState.waiting_for_question)

@router.message(QuestionState.waiting_for_question)
async def receive_question(message: Message, state: FSMContext):
    user_id = message.from_user.id
    question = message.text
    await message.bot.send_message(ADMIN_ID, f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{question}")
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()

# --- –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ ---
@router.message(F.from_user.id == ADMIN_ID, F.reply_to_message)
async def answer_to_user(message: Message):
    original = message.reply_to_message
    user_id = int(original.text.split()[3])
    await message.bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞:\n{message.text}")
    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")